"""CSRF (Cross-Site Request Forgery) Vulnerability Detector"""

import requests
from bs4 import BeautifulSoup
from colorama import Fore, Style
from modules.base import BaseModule
import re

class CSRFDetector(BaseModule):
    def __init__(self):
        super().__init__(
            name="CSRF Detector",
            description="Cross-Site Request Forgery vulnerability scanner",
            author="Kotosploit Team",
            options={
                "URL": {
                    "description": "Target URL to scan",
                    "required": True,
                    "value": ""
                },
                "CHECK_FORMS": {
                    "description": "Check forms for CSRF tokens (true/false)",
                    "required": False,
                    "value": "true"
                },
                "CHECK_HEADERS": {
                    "description": "Check anti-CSRF headers (true/false)",
                    "required": False,
                    "value": "true"
                },
                "TIMEOUT": {
                    "description": "Request timeout in seconds",
                    "required": False,
                    "value": "10"
                }
            }
        )
        
        self.csrf_tokens = [
            'csrf', 'csrftoken', 'csrf_token', 'csrf-token',
            'xsrf', 'xsrf-token', 'xsrf_token',
            '_token', 'token', 'authenticity_token',
            '__requestverificationtoken', 'anti-csrf-token'
        ]
        
        self.csrf_headers = [
            'X-CSRF-Token', 'X-XSRF-Token', 'X-CSRFToken',
            'X-Requested-With', 'Origin', 'Referer'
        ]
    
    def run(self):
        url = self.options["URL"]["value"]
        check_forms = self.options["CHECK_FORMS"]["value"].lower() == "true"
        check_headers = self.options["CHECK_HEADERS"]["value"].lower() == "true"
        timeout = int(self.options["TIMEOUT"]["value"])
        
        if not url:
            print(f"{Fore.RED}[!] URL is required{Style.RESET_ALL}")
            return
        
        print(f"{Fore.CYAN}[*] Starting CSRF detection on: {url}{Style.RESET_ALL}\n")
        
        vulnerabilities = []
        
        try:
            response = requests.get(url, timeout=timeout, allow_redirects=True)
            
            if check_headers:
                header_vulns = self.check_csrf_headers(response)
                vulnerabilities.extend(header_vulns)
            
            if check_forms:
                form_vulns = self.check_forms(response, url)
                vulnerabilities.extend(form_vulns)
            
            self.display_results(vulnerabilities)
            
        except requests.exceptions.RequestException as e:
            print(f"{Fore.RED}[!] Request failed: {e}{Style.RESET_ALL}")
    
    def check_csrf_headers(self, response):
        vulns = []
        
        print(f"{Fore.YELLOW}[*] Checking anti-CSRF headers...{Style.RESET_ALL}")
        
        has_csrf_header = False
        for header in self.csrf_headers:
            if header in response.headers:
                has_csrf_header = True
                print(f"{Fore.GREEN}[+] Found anti-CSRF header: {header}{Style.RESET_ALL}")
        
        if not has_csrf_header:
            vulns.append({
                'type': 'Missing CSRF Headers',
                'severity': 'Medium',
                'description': 'No anti-CSRF headers found in response'
            })
            print(f"{Fore.RED}[-] No anti-CSRF headers detected{Style.RESET_ALL}")
        
        if 'X-Requested-With' not in response.headers:
            print(f"{Fore.YELLOW}[-] Missing X-Requested-With header{Style.RESET_ALL}")
        
        return vulns
    
    def check_forms(self, response, base_url):
        vulns = []
        
        print(f"\n{Fore.YELLOW}[*] Analyzing forms for CSRF tokens...{Style.RESET_ALL}")
        
        soup = BeautifulSoup(response.text, 'html.parser')
        forms = soup.find_all('form')
        
        if not forms:
            print(f"{Fore.CYAN}[*] No forms found on page{Style.RESET_ALL}")
            return vulns
        
        print(f"{Fore.CYAN}[*] Found {len(forms)} form(s){Style.RESET_ALL}\n")
        
        for idx, form in enumerate(forms, 1):
            action = form.get('action', '')
            method = form.get('method', 'get').upper()
            
            print(f"{Fore.CYAN}Form #{idx}:{Style.RESET_ALL}")
            print(f"  Action: {action or '(current page)'}")
            print(f"  Method: {method}")
            
            has_csrf_token = False
            
            inputs = form.find_all(['input', 'textarea'])
            for inp in inputs:
                name = inp.get('name', '').lower()
                input_type = inp.get('type', '').lower()
                
                if any(token in name for token in self.csrf_tokens):
                    has_csrf_token = True
                    print(f"{Fore.GREEN}  [+] CSRF token found: {inp.get('name')}{Style.RESET_ALL}")
                    break
                
                if input_type == 'hidden' and ('token' in name or 'csrf' in name):
                    has_csrf_token = True
                    print(f"{Fore.GREEN}  [+] Hidden CSRF token: {inp.get('name')}{Style.RESET_ALL}")
                    break
            
            if not has_csrf_token and method == 'POST':
                vulns.append({
                    'type': 'Missing CSRF Token',
                    'severity': 'High',
                    'description': f'POST form #{idx} lacks CSRF protection',
                    'action': action,
                    'method': method
                })
                print(f"{Fore.RED}  [-] VULNERABLE: No CSRF token in POST form{Style.RESET_ALL}")
            elif not has_csrf_token:
                print(f"{Fore.YELLOW}  [-] No CSRF token (GET form){Style.RESET_ALL}")
            
            print()
        
        return vulns
    
    def display_results(self, vulnerabilities):
        print(f"\n{Fore.WHITE}{'='*60}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}CSRF Scan Results{Style.RESET_ALL}")
        print(f"{Fore.WHITE}{'='*60}{Style.RESET_ALL}\n")
        
        if not vulnerabilities:
            print(f"{Fore.GREEN}[+] No CSRF vulnerabilities detected{Style.RESET_ALL}")
            print(f"{Fore.GREEN}[+] Forms appear to have proper CSRF protection{Style.RESET_ALL}")
        else:
            print(f"{Fore.RED}[!] Found {len(vulnerabilities)} potential CSRF issue(s):{Style.RESET_ALL}\n")
            
            for vuln in vulnerabilities:
                severity_color = Fore.RED if vuln['severity'] == 'High' else Fore.YELLOW
                print(f"{severity_color}[{vuln['severity']}] {vuln['type']}{Style.RESET_ALL}")
                print(f"  Description: {vuln['description']}")
                if 'action' in vuln:
                    print(f"  Form Action: {vuln['action']}")
                print()
        
        print(f"{Fore.CYAN}[*] CSRF Protection Recommendations:{Style.RESET_ALL}")
        print(f"  1. Implement anti-CSRF tokens in all state-changing forms")
        print(f"  2. Use SameSite cookie attribute")
        print(f"  3. Verify Origin/Referer headers")
        print(f"  4. Implement double-submit cookie pattern")
        print(f"  5. Use framework-provided CSRF protection")
