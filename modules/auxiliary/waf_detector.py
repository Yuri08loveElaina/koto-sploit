"""WAF (Web Application Firewall) Detector"""

import requests
from colorama import Fore, Style
from modules.base import BaseModule
import re

class WAFDetector(BaseModule):
    def __init__(self):
        super().__init__(
            name="WAF Detector",
            description="Web Application Firewall detection and fingerprinting",
            author="Kotosploit Team",
            options={
                "URL": {
                    "description": "Target URL to scan",
                    "required": True,
                    "value": ""
                },
                "TIMEOUT": {
                    "description": "Request timeout in seconds",
                    "required": False,
                    "value": "10"
                }
            }
        )
        
        self.waf_signatures = {
            'Cloudflare': {
                'headers': ['cf-ray', 'cf-cache-status', '__cfduid'],
                'cookies': ['__cfduid', '__cflb'],
                'body': ['cloudflare', 'cf-browser-verification']
            },
            'AWS WAF': {
                'headers': ['x-amzn-requestid', 'x-amz-cf-id'],
                'cookies': ['aws-waf-token'],
                'body': ['AccessDenied', 'RequestId']
            },
            'Akamai': {
                'headers': ['x-akamai-transformed', 'akamai-origin-hop'],
                'cookies': ['ak_bmsc', 'bm_sv'],
                'body': ['akamai', 'reference #']
            },
            'Imperva (Incapsula)': {
                'headers': ['x-cdn', 'x-iinfo'],
                'cookies': ['incap_ses', 'visid_incap'],
                'body': ['incapsula', '_Incapsula_Resource']
            },
            'F5 BIG-IP': {
                'headers': ['x-wa-info', 'bigipserver'],
                'cookies': ['BIGipServer', 'TS01'],
                'body': ['BigIP', 'F5']
            },
            'ModSecurity': {
                'headers': ['mod_security', 'NOYB'],
                'cookies': [],
                'body': ['mod_security', 'ModSecurity']
            },
            'Sucuri': {
                'headers': ['x-sucuri-id', 'x-sucuri-cache'],
                'cookies': ['sucuri-'],
                'body': ['sucuri', 'Questions?']
            },
            'Barracuda': {
                'headers': ['barra_counter_session', 'BNI__BARRACUDA_LB_COOKIE'],
                'cookies': ['barra_counter_session'],
                'body': ['barracuda', 'You have been blocked']
            },
            'Wordfence': {
                'headers': ['wordfence'],
                'cookies': ['wfvt_', 'wordfence'],
                'body': ['wordfence', 'generated by wordfence']
            },
            'Fortinet FortiWeb': {
                'headers': ['fortigate', 'fortiweb'],
                'cookies': ['FORTIWAFSID'],
                'body': ['fortinet', 'fortiweb']
            }
        }
        
        self.attack_payloads = [
            "' OR '1'='1",
            "<script>alert(1)</script>",
            "../../../etc/passwd",
            "UNION SELECT NULL--",
            "<?php system('ls'); ?>"
        ]
    
    def run(self):
        url = self.options["URL"]["value"]
        timeout = int(self.options["TIMEOUT"]["value"])
        
        if not url:
            print(f"{Fore.RED}[!] URL is required{Style.RESET_ALL}")
            return
        
        print(f"{Fore.CYAN}[*] Starting WAF detection on: {url}{Style.RESET_ALL}\n")
        
        detected_wafs = []
        
        try:
            print(f"{Fore.YELLOW}[*] Sending normal request...{Style.RESET_ALL}")
            normal_response = requests.get(url, timeout=timeout, allow_redirects=True)
            
            waf_info = self.check_waf_signatures(normal_response)
            if waf_info:
                detected_wafs.extend(waf_info)
            
            print(f"{Fore.YELLOW}[*] Testing with attack payloads...{Style.RESET_ALL}")
            attack_wafs = self.test_with_attacks(url, timeout)
            
            for waf in attack_wafs:
                if waf not in detected_wafs:
                    detected_wafs.append(waf)
            
            self.display_results(detected_wafs, normal_response)
            
        except requests.exceptions.RequestException as e:
            print(f"{Fore.RED}[!] Request failed: {e}{Style.RESET_ALL}")
    
    def check_waf_signatures(self, response):
        detected = []
        
        for waf_name, signatures in self.waf_signatures.items():
            found = False
            evidence = []
            
            for header in signatures['headers']:
                if header.lower() in [h.lower() for h in response.headers.keys()]:
                    found = True
                    evidence.append(f"Header: {header}")
            
            for cookie in signatures['cookies']:
                if cookie.lower() in response.headers.get('Set-Cookie', '').lower():
                    found = True
                    evidence.append(f"Cookie: {cookie}")
            
            for pattern in signatures['body']:
                if pattern.lower() in response.text.lower():
                    found = True
                    evidence.append(f"Body pattern: {pattern}")
            
            if found:
                detected.append({
                    'name': waf_name,
                    'confidence': 'High' if len(evidence) > 1 else 'Medium',
                    'evidence': evidence
                })
                print(f"{Fore.GREEN}[+] Detected: {waf_name} ({len(evidence)} indicators){Style.RESET_ALL}")
        
        return detected
    
    def test_with_attacks(self, url, timeout):
        detected = []
        
        for payload in self.attack_payloads:
            try:
                test_url = url + "?test=" + payload
                response = requests.get(test_url, timeout=timeout, allow_redirects=False)
                
                if response.status_code in [403, 406, 429, 999]:
                    print(f"{Fore.YELLOW}[*] Attack blocked (Status: {response.status_code}) - WAF likely present{Style.RESET_ALL}")
                    
                    waf_info = self.check_waf_signatures(response)
                    detected.extend(waf_info)
                    
            except requests.exceptions.RequestException:
                pass
        
        return detected
    
    def display_results(self, detected_wafs, normal_response):
        print(f"\n{Fore.WHITE}{'='*60}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}WAF Detection Results{Style.RESET_ALL}")
        print(f"{Fore.WHITE}{'='*60}{Style.RESET_ALL}\n")
        
        if not detected_wafs:
            print(f"{Fore.GREEN}[*] No WAF detected{Style.RESET_ALL}")
            print(f"{Fore.CYAN}[*] Website may be directly exposed or using unknown WAF{Style.RESET_ALL}")
        else:
            print(f"{Fore.RED}[!] Detected {len(detected_wafs)} WAF(s):{Style.RESET_ALL}\n")
            
            for waf in detected_wafs:
                confidence_color = Fore.RED if waf['confidence'] == 'High' else Fore.YELLOW
                print(f"{confidence_color}[{waf['confidence']} Confidence] {waf['name']}{Style.RESET_ALL}")
                print(f"  Evidence:")
                for ev in waf['evidence']:
                    print(f"    - {ev}")
                print()
        
        print(f"{Fore.CYAN}[*] Server Information:{Style.RESET_ALL}")
        print(f"  Server: {normal_response.headers.get('Server', 'Unknown')}")
        print(f"  Status Code: {normal_response.status_code}")
        
        if 'X-Powered-By' in normal_response.headers:
            print(f"  X-Powered-By: {normal_response.headers['X-Powered-By']}")
        
        print(f"\n{Fore.CYAN}[*] WAF Bypass Recommendations:{Style.RESET_ALL}")
        print(f"  1. Try different encoding methods (URL, Base64, Hex)")
        print(f"  2. Use case variation and obfuscation")
        print(f"  3. Split payloads across multiple parameters")
        print(f"  4. Use alternate HTTP methods (PUT, DELETE, PATCH)")
        print(f"  5. Test for rate limiting and IP blocking")
